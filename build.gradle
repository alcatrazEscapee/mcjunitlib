buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'maven-publish'
	id 'idea'
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Allow local mappings customization
def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : minecraft_version
println 'Using mappings: ' + mappingsChannel + ' / ' + mappingsVersion

version = '0.4-1.17.1'

group = 'com.alcatrazescapee.mcjunitlib'
archivesBaseName = "mcjunitlib-${minecraft_version}"
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
	mavenLocal()
    // flatDir {
	//     dirs 'libs'
	// }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation(localGroovy())

    implementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

	// if (System.getProperty("idea.sync.active") != "true") {
    //     annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    //}
}

jar {
    manifest {
        attributes([
            "Implementation-Version": "${project.version}",
            "FMLModType": "LIBRARY"
            // "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}


// mixin {
//     add sourceSets.main, "${mod_id}.refmap.json"
//}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'com.github.alcatrazEscapee'
            artifactId = "mcjunitlib"
            version = "${version}"
        }
    }
    repositories {
        mavenLocal()
    }
}