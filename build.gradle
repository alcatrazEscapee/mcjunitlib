buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

/**
 * Version in dev is set to 'dev'
 * Any builds produced by the github actions build script will have a version matching their tag.
 * All version numbers should be Semantic Versioning 2.0 compliant
 */
if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = 'dev'
}
group = 'com.github.alcatrazEscapee'
archivesBaseName = 'mcjunitlib'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def jitpack = System.getenv("JITPACK")
    if (jitpack == null) {
        mappings channel: 'snapshot', version: 'complete-20200912-1.16.3-v5'
    } else {
        mappings channel: 'official', version: mc_version
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    // Implementation dependencies that should also be packaged in the fat jar
    implementation.extendsFrom(implementationPackage)
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementationPackage 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    implementationPackage 'org.junit.platform:junit-platform-launcher:1.6.2'
    implementationPackage 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

jar {
    manifest {
        attributes([
                "Implementation-Version": "${version}",
                "FMLModType": "LIBRARY"
        ])
    }
    // Include the full JUnit classpath in the jar
    // This is done so the TransformingClassLoader will properly load these classes and not cause classloading leaks into test code or minecraft source code
    // It also means it's easier to specify dependencies on this project, as transitive dependencies do not work correctly with fg.deobf()
    from {
        configurations.implementationPackage.filter({ File file ->
            file.exists()
        }).collect({ File file ->
            file.isDirectory() ? file : zipTree(file)
        })
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'com.github.alcatrazEscapee'
            artifactId = "mcjunitlib"
            version = "${version}"

            // Adds the sources as an artifact.
            artifact sourcesJar {
                classifier 'sources'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}