buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

// Allow local mappings customization
def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : mc_version
println 'Using mappings: ' + mappingsChannel + ' / ' + mappingsVersion

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion

group = 'com.github.alcatrazEscapee'
archivesBaseName = 'mcjunitlib'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    // Implementation dependencies that should also be packaged in the fat jar
    implementation.extendsFrom(implementationPackage)
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementationPackage 'org.junit.platform:junit-platform-launcher:1.6.2'
    implementationPackage 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    implementationPackage 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    implementationPackage 'org.junit.jupiter:junit-jupiter-params:5.4.2'
}

jar {
    manifest {
        attributes([
                "Implementation-Version": "${version}",
                "FMLModType": "LIBRARY"
        ])
    }
    // Include the full JUnit classpath in the jar
    // This is done so the TransformingClassLoader will properly load these classes and not cause classloading leaks into test code or minecraft source code
    // It also means it's easier to specify dependencies on this project, as transitive dependencies do not work correctly with fg.deobf()
    from {
        configurations.implementationPackage.filter({ File file ->
            file.exists()
        }).collect({ File file ->
            file.isDirectory() ? file : zipTree(file)
        })
    }
}

jar.finalizedBy('reobfJar')

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            groupId = 'com.github.alcatrazEscapee'
            artifactId = "mcjunitlib"
            version = "${version}"

            // Filter any dependencies from appearing in the pom.xml
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    assert dep.parent().remove(dep)
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}